trigger:
- master
variables:
 ImageName: 'londono652/petbook:$(Build.BuildId)'
 npm_config_cache: $(Pipeline.Workspace)/.npm
pool:
  vmImage: 'ubuntu-latest'

steps:
- task: NodeTool@0
  inputs:
    versionSpec: '10.x'
  displayName: 'Install Node.js'

- script: |
    npm install -g @angular/cli
    ng build --prod  
  displayName: 'Build'

- script: |
    npm run test-ci   
    ls /coverage
    ls     
  displayName: 'Pruebas Unitarias'

- task: SonarQubePrepare@4
  inputs:
    SonarQube: 'sonarqube'
    scannerMode: 'CLI'
    configMode: 'file'
  displayName: 'Configurar Sonar'
- task: SonarQubeAnalyze@4
  displayName: 'Analisis Codigo y Cobertura'

- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: 'dist'
    includeRootFolder: true
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
    replaceExistingArchive: true
  displayName: 'Archivar Artefacto'

- task: PublishBuildArtifacts@1
  displayName: 'Publicar Artefacto'

- task: Docker@1
  inputs:
    containerregistrytype: 'Container Registry'
    dockerRegistryEndpoint: 'dockerhub'
    command: 'Build an image'
    dockerFile: '**/Dockerfile'
    imageName: '$(ImageName)'
    includeLatestTag: true
    useDefaultContext: false
    buildContext: '.'
  displayName: 'Construir Imagen Docker'

- task: Docker@1
  inputs:
    containerregistrytype: 'Container Registry'
    dockerRegistryEndpoint: 'dockerhub'
    command: 'Push an image'
    imageName: '$(ImageName)'
  displayName: 'Publicar Imagen Docker'
